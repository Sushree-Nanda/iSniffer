/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdminStdView.java
 *
 * Created on Jan 17, 2011, 9:35:21 PM
 */

package iSUI.Panals;

import iSEngine.Mediator;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;

/**
 *
 * @author Administrator
 */
public class IP4View extends javax.swing.JPanel implements Observer{

    DefaultTableModel model;
    Mediator meidator;
    boolean filterOn;
    String filterBy;

    /** Creates new form SpamEmailView */
    public IP4View() {
        initComponents();
        this.meidator = new Mediator();
        this.filterOn = false;
        this.filterBy = "Src.IP";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableIPPackets = new javax.swing.JTable();
        jButtonrefresh = new javax.swing.JButton();
        jTextFieldfiltertext = new javax.swing.JTextField();
        jComboBoxfilter = new javax.swing.JComboBox();
        jButtonfilter = new javax.swing.JButton();
        jButtonUnfilter = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("IPV4 Packets"));

        jLabel10.setFont(new java.awt.Font("Papyrus", 1, 24));
        jLabel10.setText("IPV4 Packets");

        jTableIPPackets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Src.IP", "Dest.IP", "Hop Limit", "Length", "Protocol", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Short.class, java.lang.Short.class, java.lang.Short.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableIPPackets);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );

        jButtonrefresh.setText("Refresh");
        jButtonrefresh.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonrefresh.setFocusable(false);
        jButtonrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonrefreshActionPerformed(evt);
            }
        });

        jTextFieldfiltertext.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jComboBoxfilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Src.IP", "Dst.IP" }));
        jComboBoxfilter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jComboBoxfilter.setFocusable(false);

        jButtonfilter.setText("Filter");
        jButtonfilter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonfilter.setFocusable(false);
        jButtonfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonfilterActionPerformed(evt);
            }
        });

        jButtonUnfilter.setText("Unfilter");
        jButtonUnfilter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUnfilter.setFocusable(false);
        jButtonUnfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnfilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jTextFieldfiltertext, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonUnfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                                .addComponent(jButtonrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonrefresh)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldfiltertext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxfilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonUnfilter)
                        .addComponent(jButtonfilter)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonrefreshActionPerformed
         this.deleteRows();
    }//GEN-LAST:event_jButtonrefreshActionPerformed

    private void jButtonfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonfilterActionPerformed
        this.filterOn = true;
        this.filterBy = (String) this.jComboBoxfilter.getSelectedItem();
}//GEN-LAST:event_jButtonfilterActionPerformed

    private void jButtonUnfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnfilterActionPerformed
        this.filterOn = false;
}//GEN-LAST:event_jButtonUnfilterActionPerformed

    private void deleteRows(){

        int numRows = this.model.getRowCount();

        for (int i=numRows-1; i >= 0; i--) {
          this.model.removeRow(i);
          this.jTableIPPackets.revalidate();
        }

    }

    private void setTableValues(ArrayList<IPPacket> data){

        if(data != null){
            
            IPPacket ipp;
            String filterValue = "";

            model = (DefaultTableModel) jTableIPPackets.getModel();

            for(int i=0; i<data.size(); i++){
                ipp = data.get(i);
                String temp = new String(ipp.data); 
                
                if(!filterOn){
                    model.addRow(new Object[]{ipp.src_ip, ipp.dst_ip, ipp.hop_limit, ipp.length, this.getIPV4Protocol(ipp.protocol),temp});
                }else{
                    filterValue = this.jTextFieldfiltertext.getText();
                    
                    if("Src.IP".equals(this.filterBy) && filterValue.equals(ipp.src_ip.toString())){
                        model.addRow(new Object[]{ipp.src_ip, ipp.dst_ip, ipp.hop_limit, ipp.length, this.getIPV4Protocol(ipp.protocol),temp});
                    }else if("Dst.IP".equals(this.filterBy) && filterValue.equals(ipp.dst_ip.toString())){
                        model.addRow(new Object[]{ipp.src_ip, ipp.dst_ip, ipp.hop_limit, ipp.length, this.getIPV4Protocol(ipp.protocol),temp});
                    }
                }
                
            }
            
            this.meidator.logIP(data);

        }else{
            JOptionPane.showMessageDialog(null, "There are no Valid Mails available");
        }

    }
    
    private String getIPV4Protocol(short type){
        
        switch (type){
            
            case 0: return "HOPOPT";
            case 1: return "ICMP";
            case 2: return "IGMP";
            case 3: return "GGP";
            case 4: return "IP in IP";
            case 5: return "ST";
            case 6: return "TCP";
            case 7: return "CBT";
            case 8: return "EGP";
            case 9: return "IGP";
            case 10: return "BBN-RCC-MON";
            case 11: return "NVP-II";
            case 17: return "UDP";
            case 27: return "RDP";
            case 28: return "IRTP";
            case 41: return "IPv6";
            case 46: return "RSVP";
            case 56: return "TLSP";
            case 58: return "IPv6-ICMP";
            case 121: return "SMP";
            default: return "Unknown";
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonUnfilter;
    private javax.swing.JButton jButtonfilter;
    private javax.swing.JButton jButtonrefresh;
    private javax.swing.JComboBox jComboBoxfilter;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableIPPackets;
    private javax.swing.JTextField jTextFieldfiltertext;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        ArrayList<Packet> pkts = (ArrayList<Packet>) arg;
        ArrayList<IPPacket> ippkts = new ArrayList<IPPacket>();
        Packet p;
        IPPacket ipp;
        
        for(int i=0; i<pkts.size(); i++){
            p = (Packet) pkts.get(i);
            if(p!=null && p instanceof IPPacket){
                ipp = (IPPacket) p;
                ippkts.add(ipp);
            }
        }
        this.setTableValues(ippkts);
    }

}
