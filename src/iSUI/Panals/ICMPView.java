/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdminStdView.java
 *
 * Created on Jan 17, 2011, 9:35:21 PM
 */

package iSUI.Panals;

import iSEngine.Mediator;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jpcap.packet.ICMPPacket;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;

/**
 *
 * @author Administrator
 */
public class ICMPView extends javax.swing.JPanel implements Observer{

    DefaultTableModel model;
    Mediator meidator;
    boolean filterOn;

    /** Creates new form SpamEmailView */
    public ICMPView() {
        initComponents();
        this.meidator = new Mediator();
        this.filterOn = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableICMPPackets = new javax.swing.JTable();
        jButtonrefresh = new javax.swing.JButton();
        jTextFieldfiltertext = new javax.swing.JTextField();
        jButtonfilter = new javax.swing.JButton();
        jButtonUnfilter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("ICMP Packets"));

        jLabel10.setFont(new java.awt.Font("Papyrus", 1, 24)); // NOI18N
        jLabel10.setText("ICMP Packets");

        jTableICMPPackets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "ICMP Type", "Redirect address", "Checksum", "Alive Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Byte.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableICMPPackets);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );

        jButtonrefresh.setText("Refresh");
        jButtonrefresh.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonrefresh.setFocusable(false);
        jButtonrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonrefreshActionPerformed(evt);
            }
        });

        jTextFieldfiltertext.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextFieldfiltertext.setEnabled(false);
        jTextFieldfiltertext.setFocusable(false);

        jButtonfilter.setText("Filter");
        jButtonfilter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonfilter.setEnabled(false);
        jButtonfilter.setFocusable(false);
        jButtonfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonfilterActionPerformed(evt);
            }
        });

        jButtonUnfilter.setText("Unfilter");
        jButtonUnfilter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUnfilter.setEnabled(false);
        jButtonUnfilter.setFocusable(false);
        jButtonUnfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnfilterActionPerformed(evt);
            }
        });

        jLabel1.setText("Type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldfiltertext, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonUnfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                                .addComponent(jButtonrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonrefresh)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldfiltertext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonfilter)
                        .addComponent(jButtonUnfilter)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonrefreshActionPerformed
         this.deleteRows();
    }//GEN-LAST:event_jButtonrefreshActionPerformed

    private void jButtonfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonfilterActionPerformed
        this.filterOn = true;
}//GEN-LAST:event_jButtonfilterActionPerformed

    private void jButtonUnfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnfilterActionPerformed
        this.filterOn = false;
}//GEN-LAST:event_jButtonUnfilterActionPerformed

    private void deleteRows(){

        int numRows = this.model.getRowCount();

        for (int i=numRows-1; i >= 0; i--) {
          this.model.removeRow(i);
          this.jTableICMPPackets.revalidate();
        }

    }

    private void setTableValues(ArrayList<ICMPPacket> data){

        if(data != null){
            
            ICMPPacket icmpp;
            String filterValue = "";

            model = (DefaultTableModel) jTableICMPPackets.getModel();

            for(int i=0; i<data.size(); i++){
                icmpp = data.get(i);
                
                if(!filterOn){
                    model.addRow(new Object[]{icmpp.type, this.getICMPType(icmpp.type), icmpp.redir_ip, icmpp.checksum, icmpp.alive_time});
                }
                /*else{
                    filterValue = this.jTextFieldfiltertext.getText();
                    
                    if(filterValue.equals(icmpp.type.toString())){
                        model.addRow(new Object[]{icmpp.type, this.getICMPType(icmpp.type), icmpp.redir_ip, icmpp.checksum, icmpp.alive_time});
                    }
                }*/
                
            }
            
            //this.meidator.logIP(data);

        }else{
            JOptionPane.showMessageDialog(null, "There are no Valid Mails available");
        }

    }
    
    private String getICMPType(int type){
        
        switch (type){
            
            case 0: return "Echo Reply";
            case 1: return "Unassigned";
            case 2: return "Unassigned";
            case 3: return "Destination Unreachable";
            case 4: return "Source Quench";
            case 5: return "Redirect";
            case 6: return "Alternate Host Address";
            case 7: return "Unassigned";
            case 8: return "Echo";
            case 9: return "Router Advertisement";
            case 10: return "Router Selection";
            case 11: return "Time Exceeded";
            case 12: return "Parameter Problem";
            case 13: return "Timestamp";
            case 14: return "Timestamp Reply";
            case 15: return "Information Request";
            case 16: return "Information Reply";
            case 17: return "Address Mask Request";
            case 18: return "Address Mask Reply";
            case 19: return "Reserved (for Security)";
            case 30: return "Traceroute";
            case 31: return "Datagram Conversion Error";
            case 32: return "Mobile Host Redirect";
            case 33: return "IPv6 Where-Are-You";
            case 34: return "IPv6 I-Am-Here";
            case 35: return "Mobile Registration Request";
            case 36: return "Mobile Registration Reply";
            case 40: return "Authentication Failures";
            default: return "Unknown";
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonUnfilter;
    private javax.swing.JButton jButtonfilter;
    private javax.swing.JButton jButtonrefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableICMPPackets;
    private javax.swing.JTextField jTextFieldfiltertext;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        ArrayList<Packet> pkts = (ArrayList<Packet>) arg;
        ArrayList<ICMPPacket> ippkts = new ArrayList<ICMPPacket>();
        Packet p;
        ICMPPacket ipp;
        
        for(int i=0; i<pkts.size(); i++){
            p = (Packet) pkts.get(i);
            if(p!=null && p instanceof ICMPPacket){
                ipp = (ICMPPacket) p;
                ippkts.add(ipp);
            }
        }
        this.setTableValues(ippkts);
    }

}
